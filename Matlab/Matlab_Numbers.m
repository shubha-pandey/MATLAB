%  ** NUMBERS **

% By default, MATLAB stores all numeric values as double-precision floating point numbers.
% All numeric types support basic array operations and mathematical operations.

x = single([5.32 3.47 6.28]) .* 7.5
x = double([5.32 3.47 6.28]) .* 7.5
x = int8([5.32 3.47 6.28]) .* 7.5
x = int16([5.32 3.47 6.28]) .* 7.5
x = int32([5.32 3.47 6.28]) .* 7.5


% converting types
x = int32([5.32 3.47 6.28]) .* 7.5
x = int64([5.32 3.47 6.28]) .* 7.5
x = num2cell(x)


% Smallest And Largest Numbers

% The functions intmax() and intmin() return the maximum and minimum values that can be represented with all types of integer numbers.

% displaying the smallest and largest signed integer data
str = 'The range for int8 is:\n\t%d to %d ';
sprintf(str, intmin('int8'), intmax('int8'))

str = 'The range for int16 is:\n\t%d to %d ';
sprintf(str, intmin('int16'), intmax('int16'))

str = 'The range for int32 is:\n\t%d to %d ';
sprintf(str, intmin('int32'), intmax('int32'))

str = 'The range for int64 is:\n\t%d to %d ';
sprintf(str, intmin('int64'), intmax('int64'))
 
% displaying the smallest and largest unsigned integer data
str = 'The range for uint8 is:\n\t%d to %d ';
sprintf(str, intmin('uint8'), intmax('uint8'))

str = 'The range for uint16 is:\n\t%d to %d ';
sprintf(str, intmin('uint16'), intmax('uint16'))

str = 'The range for uint32 is:\n\t%d to %d ';
sprintf(str, intmin('uint32'), intmax('uint32'))

str = 'The range for uint64 is:\n\t%d to %d ';
sprintf(str, intmin('uint64'), intmax('uint64'))


% Smallest And Largest Floating Point Numbers

% The functions realmax() and realmin() return the maximum and minimum values that can be represented with floating point numbers.

% displaying the smallest and largest single-precision 
% floating point number
str = 'The range for single is:\n\t%g to %g and\n\t %g to  %g';
sprintf(str, -realmax('single'), -realmin('single'), ...
   realmin('single'), realmax('single'))

% displaying the smallest and largest double-precision 
% floating point number
str = 'The range for double is:\n\t%g to %g and\n\t %g to  %g';
sprintf(str, -realmax('double'), -realmin('double'), ...
   realmin('double'), realmax('double'))




%  ** RANDOM NUMBERS **

% use 'rand' display random numbers that are uniformly distributed

% return a random number between 0 to 1.
a = rand

% return a random number that is uniformly distributed. It will be a matrix of nxn
a = rand(n)

% return a uniformly distributed array of random numbers of the size sz1 by szn
a = rand(sz1, sz2,.....szn)

% return a random number array of size sz, the vector size is sz
a = rand(sz)

% The array of random numbers returned here is of type typename
a = rand(_, typename)

% an array of random numbers that have a datatype like p or complexity (real or complex) like p.
a = rand(_, “like”, p)

% The random numbers are created from the stream s. make use of RandStream to create a stream
a = rand(s,_)


% 'randn' − this function is the same as rand but the only difference is that it will return random numbers that are normally distributed

% return a random scalar number from standard normal distribution
a = randn

% return a nxn matrix that comes from standard normal distribution
a = randn(n)

% return an array of random numbers of the size sz1 by szn
a = randn(sz1, sz2,.....szn)


% 'randi' − Deals with uniformly distributed pseudo random integers

% return a pseudorandom scalar integer that is between 0 to imax.
a = randi(imax)

% return a nxn matrix with integers that falls between [1, imax]
a = randi(imax,n)

% return an array of random integers of the size sz1 by szn
a = randi(imax,sz1,...,szN)

% return a random integer array of size sz, the vector size is sz
a = randi(imax,sz)

% The array of random integers between 1 to imax of type typename
a = randi(___,typename)

% return an array of pseudorandom integers in an interval of imin and imax.
a = randi([imin,imax],___)


% 'randperm' − The random number is generated by random permutation of integers

% return a row vector that will have integers that are permutation of from 1 to n and will not repeat any values
a = randperm(n)

% return a row vector that will have unique k integers which are randomly selected from the permutation done from 1 to n
a = randperm(n,k)

% random permutation generates integers that are done on the random number stream s
a = randperm(s,___)

